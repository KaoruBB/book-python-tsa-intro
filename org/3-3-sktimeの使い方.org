* 第3部　基本的な時系列予測の手法
:PROPERTIES:
:CUSTOM_ID: 第3部-基本的な時系列予測の手法
:header-args:jupyter-python: :session tsa :kernel py_tsa :async yes :tangle yes :exports both
:END:
** 第3章　sktimeの使い方
:PROPERTIES:
:CUSTOM_ID: 第3章-sktimeの使い方
:END:
*** 分析の準備
:PROPERTIES:
:CUSTOM_ID: 分析の準備
:END:
#+begin_src jupyter-python
# 数値計算に使うライブラリ
import numpy as np
import pandas as pd

# グラフを描画するライブラリ
from matplotlib import pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
sns.set()

# データ読み込みに利用
import statsmodels.api as sm

# sktime：グラフ描画
from sktime.utils.plotting import plot_series

# sktime：予測
from sktime.forecasting.naive import NaiveForecaster
from sktime.forecasting.trend import PolynomialTrendForecaster

# sktime：予測の評価指標
from sktime.performance_metrics.forecasting import (
    mean_absolute_scaled_error, MeanAbsoluteError,
    mean_absolute_percentage_error, mean_absolute_error
)

# sktime：予測の評価
from sktime.forecasting.model_selection import (
    temporal_train_test_split, ExpandingWindowSplitter, ForecastingGridSearchCV
)
from sktime.forecasting.model_evaluation import evaluate

# sktime：データの変換
from sktime.transformations.series.detrend import (
    Deseasonalizer, Detrender
)
from sktime.transformations.series.difference import Differencer
from sktime.transformations.series.boxcox import LogTransformer

# sktime：パイプライン
from sktime.forecasting.compose import (
    TransformedTargetForecaster, MultiplexForecaster
)
from sktime.transformations.compose import OptionalPassthrough

# グラフの日本語表記
# from matplotlib import rcParams
# rcParams['font.family'] = 'sans-serif'
# rcParams['font.sans-serif'] = 'Meiryo'
import japanize_matplotlib
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# 表示設定
np.set_printoptions(linewidth=60)
pd.set_option('display.width', 800)

from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 8, 4
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# 飛行機乗客数データの読み込み
air_passengers = sm.datasets.get_rdataset('AirPassengers').data

# 日付インデックスの作成(PeriodIndex)
date_index = pd.period_range(
    start='1949-01', periods=len(air_passengers), freq='M')
air_passengers.index = date_index

# 不要な時間ラベルの削除
air_passengers = air_passengers.drop(air_passengers.columns[0], axis=1)

# 結果の確認
print(air_passengers.head(3))
#+end_src

#+RESULTS:
:          value
: 1949-01    112
: 1949-02    118
: 1949-03    132

*** PeriodIndexを持つデータの可視化
:PROPERTIES:
:CUSTOM_ID: periodindexを持つデータの可視化
:END:
#+begin_src jupyter-python
# これはエラーになるので注意

# グラフサイズの指定
# fig, ax = plt.subplots(figsize=(8, 4))

# 折れ線グラフを描く
# ax.plot(air_passengers['value'], label='原系列')
#+end_src

#+begin_src jupyter-python  :file ./images/3-3-3a.png :results output file
# 参考：素朴にpandasのplot関数を適用

# グラフサイズの指定
fig, ax = plt.subplots(figsize=(8, 4))

# 折れ線グラフを描く
air_passengers.plot(ax=ax)
#+end_src

#+RESULTS:
[[file:./images/3-3-3a.png]]

#+begin_src jupyter-python  :file ./images/3-3-3b.png :results output file
# 参考：sktimeのplot_series関数を利用

# 折れ線グラフを描く
fig, ax = plot_series(air_passengers, labels=['原系列'], markers=[''])

# グラフサイズの指定
fig.set_size_inches(8, 4)
#+end_src

#+RESULTS:
[[file:./images/3-3-3b.png]]

*** データの分割
:PROPERTIES:
:CUSTOM_ID: データの分割
:END:
#+begin_src jupyter-python
# 訓練データとテストデータに分割する
train, test = temporal_train_test_split(air_passengers, test_size=36)
test.index
#+end_src

#+RESULTS:
: PeriodIndex(['1958-01', '1958-02', '1958-03', '1958-04', '1958-05', '1958-06',
:              '1958-07', '1958-08', '1958-09', '1958-10', '1958-11', '1958-12',
:              '1959-01', '1959-02', '1959-03', '1959-04', '1959-05', '1959-06',
:              '1959-07', '1959-08', '1959-09', '1959-10', '1959-11', '1959-12',
:              '1960-01', '1960-02', '1960-03', '1960-04', '1960-05', '1960-06',
:              '1960-07', '1960-08', '1960-09', '1960-10', '1960-11', '1960-12'],
:             dtype='period[M]')


#+begin_src jupyter-python
# 予測期間
fh = np.arange(1, len(test) + 1)
fh
#+end_src

#+RESULTS:
: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
:        18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
:        35, 36])

*** sktimeによる予測
:PROPERTIES:
:CUSTOM_ID: sktimeによる予測
:END:
**** 持続予測(ナイーブ予測)
:PROPERTIES:
:CUSTOM_ID: 持続予測ナイーブ予測
:END:
#+begin_src jupyter-python
# 予測手法の指定
naive_forecaster = NaiveForecaster(strategy='last')

# データへの当てはめ
naive_forecaster.fit(train)

# 予測の実施
naive_pred = naive_forecaster.predict(fh)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# 参考：fitとpredictを同時に実行
print(naive_forecaster.fit_predict(y=train, fh=fh).head(3))
#+end_src

#+RESULTS:
:          value
: 1958-01  336.0
: 1958-02  336.0
: 1958-03  336.0

**** 季節ナイーブ予測
:PROPERTIES:
:CUSTOM_ID: 季節ナイーブ予測
:END:
#+begin_src jupyter-python
# 予測手法の指定
s_naive_forecaster = NaiveForecaster(strategy='last', sp=12)

# データへの当てはめ
s_naive_forecaster.fit(train)

# 予測の実施
s_naive_pred = s_naive_forecaster.predict(fh)

print(s_naive_pred.head(3))
#+end_src

#+RESULTS:
:          value
: 1958-01  315.0
: 1958-02  301.0
: 1958-03  356.0

**** 平均値予測
:PROPERTIES:
:CUSTOM_ID: 平均値予測
:END:
#+begin_src jupyter-python
# 予測手法の指定
mean_forecaster = NaiveForecaster(strategy='mean')

# データへの当てはめ
mean_forecaster.fit(train)

# 予測の実施
mean_pred = mean_forecaster.predict(fh)

print(mean_pred.head(3))
#+end_src

#+RESULTS:
:               value
: 1958-01  230.898148
: 1958-02  230.898148
: 1958-03  230.898148

**** 移動平均法による予測
:PROPERTIES:
:CUSTOM_ID: 移動平均法による予測
:END:
#+begin_src jupyter-python
# 予測手法の指定
ma_forecaster = NaiveForecaster(strategy='mean', window_length=12)

# データへの当てはめ
ma_forecaster.fit(train)

# 予測の実施
ma_pred = ma_forecaster.predict(fh)

print(ma_pred.head(3))
#+end_src

#+RESULTS:
:               value
: 1958-01  368.416667
: 1958-02  368.416667
: 1958-03  368.416667

**** ドリフト予測
:PROPERTIES:
:CUSTOM_ID: ドリフト予測
:END:
#+begin_src jupyter-python
# 予測手法の指定
drift_forecaster = NaiveForecaster(strategy='drift')

# データへの当てはめ
drift_forecaster.fit(train)

# 予測の実施
drift_pred = drift_forecaster.predict(fh)

print(drift_pred.head(3))
#+end_src

#+RESULTS:
:               value
: 1958-01  338.093458
: 1958-02  340.186916
: 1958-03  342.280374

*** sktimeによるクロスバリデーション
:PROPERTIES:
:CUSTOM_ID: sktimeによるクロスバリデーション
:END:
**** 1時点先予測による評価
:PROPERTIES:
:CUSTOM_ID: 時点先予測による評価
:END:
#+begin_src jupyter-python
# CVの設定
# 1時点先予測を、データを1個ずつ増やしながら何度も繰り返す
cv = ExpandingWindowSplitter(fh=1, initial_window=1, step_length=1)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# CVの実行
cv_df = evaluate(forecaster=naive_forecaster, cv=cv, y=train, 
                 scoring=MeanAbsoluteError())
print(cv_df.head(3))
#+end_src

#+RESULTS:
:    test_MeanAbsoluteError  fit_time  pred_time  len_train_window   cutoff
: 0                     6.0  0.002276   0.014802                 1  1949-01
: 1                    14.0  0.001678   0.004843                 2  1949-02
: 2                     3.0  0.001595   0.004351                 3  1949-03


#+begin_src jupyter-python
# 1時点先予測のMAEの平均値
cv_df.iloc[:, 0].mean()
#+end_src

#+RESULTS:
: 20.317757009345794


#+begin_src jupyter-python
# 参考：MASEで使う標準エラー(naive_error)と一致する
np.abs(train['1949-02':'1957-12'].values - train['1949-01':'1957-11'].values).mean()
#+end_src

#+RESULTS:
: 20.317757009345794

**** 12時点先予測による評価
:PROPERTIES:
:CUSTOM_ID: 時点先予測による評価-1
:END:
#+begin_src jupyter-python
# CVの設定
# 12時点先予測を、データを12個ずつ増やしながら何度も繰り返す
cv = ExpandingWindowSplitter(fh=np.arange(1,13), initial_window=24, 
                             step_length=12)

# CVの実行
cv_df = evaluate(forecaster=naive_forecaster, cv=cv, y=train,
                 scoring=MeanAbsoluteError(), return_data=True)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# 12時点先予測のMAEの平均値
cv_df.iloc[:, 0].mean()
#+end_src

#+RESULTS:
: 43.511904761904766

#+begin_src jupyter-python
# 参考：CVの結果の詳細
print(cv_df.head(3))
#+end_src

#+RESULTS:
#+begin_example
   test_MeanAbsoluteError  fit_time  pred_time  len_train_window   cutoff                                            y_train                                             y_test                                             y_pred
0               30.166667  0.003524   0.008025                24  1950-12           value
1949-01    112
1949-02    118
1...           value
1951-01    145
1951-02    150
1...           value
1951-01  140.0
1951-02  140.0
1...
1               31.000000  0.001934   0.006994                36  1951-12           value
1949-01    112
1949-02    118
1...           value
1952-01    171
1952-02    180
1...           value
1952-01  166.0
1952-02  166.0
1...
2               33.333333  0.001609   0.005561                48  1952-12           value
1949-01    112
1949-02    118
1...           value
1953-01    196
1953-02    196
1...           value
1953-01  194.0
1953-02  194.0
1...
#+end_example

#+begin_src jupyter-python  :file ./images/3-8-2.png :results output file
# グラフの大きさなどの設定
fig, ax = plt.subplots(figsize=(8, 4))

# 実データのプロット
train.plot(ax=ax)

# CVの結果をまとめてグラフにする
for i in np.arange(0, cv_df.shape[0]):
    cv_df['y_pred'].iloc[i].plot(ax=ax)

# 凡例
plt.legend(['actual'] + ['CV ' + str(i) for i in range(cv_df.shape[0])])
#+end_src

#+RESULTS:
[[file:./images/3-8-2.png]]

*** パイプラインの利用
:PROPERTIES:
:CUSTOM_ID: パイプラインの利用
:END:
**** 事例1：季節調整＋トレンド除去＋ナイーブ予測
:PROPERTIES:
:CUSTOM_ID: 事例1季節調整トレンド除去ナイーブ予測
:END:
#+begin_src jupyter-python
# 予測手法の指定
# 前処理から予測までを1つのパイプラインにまとめる
pipe_forecaster_1 = TransformedTargetForecaster(
    [
        ('deseasonalize', Deseasonalizer(model='multiplicative', sp=12)),
        ('detrend', Detrender(forecaster=PolynomialTrendForecaster(degree=1), 
                              model='multiplicative')),
        ('forecast', NaiveForecaster(strategy='last')),
    ]
)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# データへの当てはめ
pipe_forecaster_1.fit(train)

# 予測の実施
pipe_pred_1 = pipe_forecaster_1.predict(fh)

# 予測精度
mean_absolute_error(test, pipe_pred_1)
#+end_src

#+RESULTS:
: 23.600721546680045


#+begin_src jupyter-python
# CVの設定
# 12時点先予測を、データを12個ずつ増やしながら何度も繰り返す
cv = ExpandingWindowSplitter(fh=np.arange(1,13), initial_window=24, 
                             step_length=12)

# CVの実行
cv_df = evaluate(forecaster=pipe_forecaster_1, cv=cv, y=train, 
                 scoring=MeanAbsoluteError())

# MAEの平均
cv_df.iloc[:, 0].mean()
#+end_src

#+RESULTS:
: 11.81068805846525

**** 事例2：差分によるトレンド除去＋季節ナイーブ
:PROPERTIES:
:CUSTOM_ID: 事例2差分によるトレンド除去季節ナイーブ
:END:
#+begin_src jupyter-python
# 予測手法の指定
# 前処理から予測までを1つのパイプラインにまとめる
pipe_forecaster_2 = TransformedTargetForecaster(
    [
        ('transform', Differencer(lags=[1])),
        ('forecast', NaiveForecaster(strategy='last', sp=12))
    ]
)

# データへの当てはめ
pipe_forecaster_2.fit(train)

# 予測の実施
pipe_pred_2 = pipe_forecaster_2.predict(fh)

# 予測精度
mean_absolute_error(test, pipe_pred_2)
#+end_src

#+RESULTS:
: 17.805555555555557


#+begin_src jupyter-python
# CVの実行
evaluate(forecaster=pipe_forecaster_2, cv=cv, y=train, 
         scoring=MeanAbsoluteError()).iloc[:, 0].mean()
#+end_src

#+RESULTS:
: 11.13095238095238


#+begin_src jupyter-python  :file ./images/3-9-3.png :results output file
# 予測結果の可視化
fig, ax = plot_series(train, test, pipe_pred_1, pipe_pred_2, 
                      labels=['train', 'test', 'pipe_1', 'pipe_2'], 
                      markers=np.tile('', 4))
fig.set_size_inches(8, 4)
#+end_src

#+RESULTS:
[[file:./images/3-9-3.png]]

*** ハイパーパラメータのチューニング
:PROPERTIES:
:CUSTOM_ID: ハイパーパラメータのチューニング
:END:
#+begin_src jupyter-python
# 持続予測
naive_forecaster = NaiveForecaster(strategy='last', sp=1)

# 持続予測のハイパーパラメータの候補
param_grid = {'sp': np.arange(1,13)}

# 予測器の作成
best_naive_forecaster = ForecastingGridSearchCV(
    naive_forecaster, strategy='refit', cv=cv, param_grid=param_grid, 
    scoring=MeanAbsoluteError()
)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# データへの当てはめ
best_naive_forecaster.fit(train)

# 選ばれたパラメータ
best_naive_forecaster.best_params_
#+end_src

#+RESULTS:
| sp | : | 12 |


#+begin_src jupyter-python
# 参考：CVの結果の詳細
print(best_naive_forecaster.cv_results_)
#+end_src

#+RESULTS:
#+begin_example
    mean_test_MeanAbsoluteError  mean_fit_time  mean_pred_time      params  rank_test_MeanAbsoluteError
0                     43.511905       0.002113        0.008194   {'sp': 1}                          7.0
1                     56.630952       0.002429        0.013512   {'sp': 2}                         12.0
2                     52.178571       0.002183        0.013733   {'sp': 3}                         11.0
3                     47.000000       0.001508        0.016839   {'sp': 4}                          8.0
4                     49.702381       0.001516        0.015493   {'sp': 5}                         10.0
5                     41.273810       0.002533        0.015338   {'sp': 6}                          4.0
6                     43.500000       0.001898        0.015690   {'sp': 7}                          6.0
7                     48.119048       0.002495        0.015423   {'sp': 8}                          9.0
8                     41.285714       0.001523        0.018132   {'sp': 9}                          5.0
9                     37.761905       0.001996        0.017649  {'sp': 10}                          3.0
10                    35.571429       0.001480        0.014518  {'sp': 11}                          2.0
11                    33.083333       0.001506        0.012875  {'sp': 12}                          1.0
#+end_example


#+begin_src jupyter-python
# 予測の実施
best_naive_pred = best_naive_forecaster.predict(fh)

# 予測精度
mean_absolute_error(test, best_naive_pred)
#+end_src

#+RESULTS:
: 60.083333333333336

*** 予測手法の半自動選択
:PROPERTIES:
:CUSTOM_ID: 予測手法の半自動選択
:END:
**** 事例1：複数の予測手法からの選択
:PROPERTIES:
:CUSTOM_ID: 事例1複数の予測手法からの選択
:END:
#+begin_src jupyter-python
# 予測器の候補一覧
forecast_options = MultiplexForecaster(
    forecasters=[
        ('s_naive', s_naive_forecaster),
        ('pipe_1',  pipe_forecaster_1),
        ('pipe_2',  pipe_forecaster_2)
    ]
)

# 以下の予測から1つを選ぶ
param_grid = {'selected_forecaster': ['s_naive', 'pipe_1', 'pipe_2']}

# 予測器の作成
cv_forecaster = ForecastingGridSearchCV(
    forecast_options, strategy='refit', cv=cv, param_grid=param_grid, 
    scoring=MeanAbsoluteError()
)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# データへの当てはめ
cv_forecaster.fit(train)

# CVで判断された最良の予測手法
cv_forecaster.best_params_
#+end_src

#+RESULTS:
| selected_forecaster | : | pipe_2 |


#+begin_src jupyter-python
# 参考：CVの詳細な結果
print(cv_forecaster.cv_results_[['mean_test_MeanAbsoluteError', 'params']])
#+end_src

#+RESULTS:
:    mean_test_MeanAbsoluteError                              params
: 0                    33.083333  {'selected_forecaster': 's_naive'}
: 1                    11.810688   {'selected_forecaster': 'pipe_1'}
: 2                    11.130952   {'selected_forecaster': 'pipe_2'}

**** 事例2：対数変換の必要性の検討
:PROPERTIES:
:CUSTOM_ID: 事例2対数変換の必要性の検討
:END:
#+begin_src jupyter-python
# 前処理の有無＋予測器の候補
pipe_select = TransformedTargetForecaster(
    steps=[
        ('log', OptionalPassthrough(LogTransformer())),
        ('forecaster', MultiplexForecaster(
            forecasters=[
                ('s_naive', s_naive_forecaster),
                ('pipe_1',  pipe_forecaster_1),
                ('pipe_2',  pipe_forecaster_2)
            ]
        )),
    ]
)

# 対数変換の有無・対象となる予測方法の一覧
param_grid = {
    'log__passthrough': [True, False],
    'forecaster__selected_forecaster': ['s_naive', 'pipe_1', 'pipe_2'],
}

# 予測器の作成
cv_pipe_forecaster = ForecastingGridSearchCV(
    forecaster=pipe_select, param_grid=param_grid, 
    cv=cv, scoring=MeanAbsoluteError()
)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
# データへの当てはめ
cv_pipe_forecaster.fit(train)

# CVで判断された最良の予測手法
cv_pipe_forecaster.best_params_
#+end_src

#+RESULTS:
| forecaster__selected_forecaster | : | pipe_1 | log__passthrough | : | False |

#+begin_example
{'forecaster__selected_forecaster': 'pipe_1', 'log__passthrough': False}
#+end_example

#+begin_src jupyter-python
# CVの結果のうち、必要な列だけをコピーする
result_df = cv_pipe_forecaster.cv_results_[
    ['mean_test_MeanAbsoluteError', 'params']].copy()

# パラメータの値だけをとり出して格納する
result_df['params'] = result_df['params'].apply(lambda x: list(x.values()))

# 結果の表示
print(result_df)
#+end_src

#+RESULTS:
:    mean_test_MeanAbsoluteError            params
: 0                    33.083333   [s_naive, True]
: 1                    33.083333  [s_naive, False]
: 2                    11.810688    [pipe_1, True]
: 3                     9.090768   [pipe_1, False]
: 4                    11.130952    [pipe_2, True]
: 5                    10.881038   [pipe_2, False]


#+begin_src jupyter-python
# 予測の実施
best_pred = cv_pipe_forecaster.predict(fh)

# 予測精度
mean_absolute_error(test, best_pred)
#+end_src

#+RESULTS:
: 36.03614258141178
