* 第7部　時系列予測の実践的技術
:PROPERTIES:
:CUSTOM_ID: 第7部-時系列予測の実践的技術
:header-args:jupyter-python: :exports both :session tsa :kernel py_tsa :async yes :tangle yes
:END:
** 第1章　モデルの保存と読み込み
:PROPERTIES:
:CUSTOM_ID: 第1章-モデルの保存と読み込み
:END:
*** 分析の準備
:PROPERTIES:
:CUSTOM_ID: 分析の準備
:END:

#+begin_src jupyter-python :exports both
from pathlib import Path
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports both
# 表示設定
np.set_printoptions(linewidth=60)
pd.set_option('display.width', 80)

from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 8, 4
#+end_src

#+RESULTS:

*** 状態空間モデルの推定と予測
:PROPERTIES:
:CUSTOM_ID: 状態空間モデルの推定と予測
:END:
#+begin_src jupyter-python :exports both
# データの読み込み
train_sample = pd.read_csv(Path("../book-data")/'7-1-1-train-sample-1.csv',
                      index_col='date', 
                      parse_dates=True, 
                      dtype='float')

# 日データであることの指定
train_sample.index.freq = 'D'

# 結果の確認
print(train_sample.head(2))
print(train_sample.tail(2))
#+end_src

#+RESULTS:
:                      y
: date
: 2000-05-01  182.079325
: 2000-05-02  141.334794
:                      y
: date
: 2000-08-07  264.246774
: 2000-08-08  214.887515

#+begin_src jupyter-python :exports both
# 季節変動ありのローカル線形トレンドモデル
mod_sample = tsa.UnobservedComponents(
    train_sample['y'],              # 対象データ
    level='local linear trend',     # ローカル線形トレンド
    seasonal=7                      # 周期
).fit()

# 推定されたパラメータ
print(mod_sample.params)
#+end_src

#+RESULTS:
#+begin_example
RUNNING THE L-BFGS-B CODE

           ,* * *

Machine precision = 2.220D-16
 N =            4     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f=  5.34797D+00    |proj g|=  1.06009D-02

At iterate    5    f=  3.06196D+00    |proj g|=  7.35163D-02

At iterate   10    f=  2.96699D+00    |proj g|=  8.63580D-03

At iterate   15    f=  2.93769D+00    |proj g|=  3.49720D-02

At iterate   20    f=  2.90741D+00    |proj g|=  7.46504D-03

At iterate   25    f=  2.90268D+00    |proj g|=  1.40608D-03

At iterate   30    f=  2.90262D+00    |proj g|=  2.51766D-05

           ,* * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           ,* * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    4     31     48      1     0     0   5.568D-06   2.903D+00
  F =   2.9026176656815892

CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL
sigma2.irregular     0.104842
sigma2.level        23.397124
sigma2.trend         0.175038
sigma2.seasonal      0.092471
dtype: float64
 This problem is unconstrained.
#+end_example


#+begin_src jupyter-python :exports both
# 予測
forecast_sample = mod_sample.forecast(7)

# 予測結果の確認
forecast_sample
#+end_src

#+RESULTS:
: 2000-08-09    246.809448
: 2000-08-10    277.555478
: 2000-08-11    296.191103
: 2000-08-12    325.587272
: 2000-08-13    317.303790
: 2000-08-14    269.802011
: 2000-08-15    221.204058
: Freq: D, Name: predicted_mean, dtype: float64

*** 状態空間モデルの保存と読み込み
:PROPERTIES:
:CUSTOM_ID: 状態空間モデルの保存と読み込み
:END:
**** pickle化と読み込み
:PROPERTIES:
:CUSTOM_ID: pickle化と読み込み
:END:
#+begin_src jupyter-python :exports both
# モデルの保存
# 事前にmodフォルダを作っておくこと
mod_sample.save('./mod/bsts_sample.pickle')
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports both
# モデルの読み込み
mod_loaded = tsa.statespace.MLEResults.load('./mod/bsts_sample.pickle')

# パラメータが一致していることの確認
mod_loaded.params == mod_sample.params
#+end_src

#+RESULTS:
: sigma2.irregular    True
: sigma2.level        True
: sigma2.trend        True
: sigma2.seasonal     True
: dtype: bool

**** パラメータのみをファイルに保存して読み込む
:PROPERTIES:
:CUSTOM_ID: パラメータのみをファイルに保存して読み込む
:END:
#+begin_src jupyter-python :exports both
# パラメータの出力
mod_sample.params.to_csv('./mod/params_sample.csv', header=False)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports both
# パラメータの読み込み
imported_params = pd.read_csv(
    './mod/params_sample.csv', header=None, 
    index_col=0, dtype=object
).squeeze(1).astype('float64')

# パラメータが一致していることの確認
imported_params == mod_sample.params
#+end_src

#+RESULTS:
: 0
: sigma2.irregular    True
: sigma2.level        True
: sigma2.trend        True
: sigma2.seasonal     True
: dtype: bool

#+begin_src jupyter-python :exports both
# パラメータを設定
mod_sample_useparams = tsa.UnobservedComponents(
    train_sample['y'],              # 対象データ
    level='local linear trend',     # ローカル線形トレンド
    seasonal=7                      # 周期
)

# パラメータを指定してフィルタリング
mod_sample_useparams = mod_sample_useparams.filter(
    params = imported_params)

# 予測結果が一致していることの確認
all(mod_sample_useparams.forecast(7) == forecast_sample)
#+end_src

#+RESULTS:
: True

*** 新しいデータを用いたフィルタリングと予測
:PROPERTIES:
:CUSTOM_ID: 新しいデータを用いたフィルタリングと予測
:END:
#+begin_src jupyter-python :exports both
# データの読み込み
train_sample_2 = pd.read_csv(Path("../book-data")/'7-1-2-train-sample-2.csv',
                      index_col='date', 
                      parse_dates=True, 
                      dtype='float')

# 日データであることの指定
train_sample_2.index.freq = 'D'

# 結果の確認
print(train_sample_2.head(2))
print(train_sample_2.tail(2))
#+end_src

#+RESULTS:
:                      y
: date
: 2000-05-01  182.079325
: 2000-05-02  141.334794
:                      y
: date
: 2000-08-14  294.948285
: 2000-08-15  243.335236

#+begin_src jupyter-python :exports both
# パラメータを設定
mod_newdata = tsa.UnobservedComponents(
    train_sample_2['y'],            # 対象データ(新しいデータに変更)
    level='local linear trend',     # ローカル線形トレンド
    seasonal=7                      # 周期
)

# パラメータを指定してフィルタリング
mod_newdata = mod_newdata.filter(params = imported_params)

# パラメータが一致していることの確認
mod_newdata.params == mod_sample.params
#+end_src

#+RESULTS:
: sigma2.irregular    True
: sigma2.level        True
: sigma2.trend        True
: sigma2.seasonal     True
: dtype: bool

#+begin_src jupyter-python :exports both
# フィルター化推定量の比較
all(mod_newdata.level["filtered"][0:100] == mod_sample.level["filtered"])
#+end_src

#+RESULTS:
: True

#+begin_src jupyter-python :exports both :file ./images/7-1-1.png :results output file
# 古いデータを使ったモデルで2週間先まで予測
old_forecast = mod_sample.forecast(14)

# 新しいデータを使ったモデルで1週間先まで予測
new_forecast = mod_newdata.forecast(7)

# グラフサイズの指定
fig, ax = plt.subplots(figsize=(8, 4))

# 折れ線グラフを描く
ax.plot(train_sample_2, label='実際の売り上げ')
ax.plot(old_forecast, label='古いデータを用いた予測値')
ax.plot(new_forecast, label='新しいデータを用いた予測値')

# 凡例
ax.legend()

# 軸の指定
ax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))

# 軸ラベルのフォーマット
ax.xaxis.set_major_formatter(mdates.DateFormatter('%m月%d日'))

# plt.savefig('../図/図/7-1-1-データを追加することで変化する予測結果.svg')
#+end_src

#+RESULTS:
[[file:./images/7-1-1.png]]

*** appendメソッドを用いたデータの追加
:PROPERTIES:
:CUSTOM_ID: appendメソッドを用いたデータの追加
:END:
#+begin_src jupyter-python :exports both
# 追加データ
train_update = train_sample_2.loc['2000-08-09':'2000-08-15']

# データを追加したモデル
mod_update = mod_sample.append(train_update)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
type(mod_update)
#+end_src

#+RESULTS:
: statsmodels.tsa.statespace.structural.UnobservedComponentsResultsWrapper

#+begin_src jupyter-python :exports both
# フィルター化推定量が一致する
all(mod_newdata.level["filtered"] == mod_update.level["filtered"])
#+end_src

#+RESULTS:
: True

#+begin_src jupyter-python :exports both
# 予測値も一致する
all(new_forecast == mod_update.forecast(7))
#+end_src

#+RESULTS:
: True

*** 複数の予測系列への分析事例
:PROPERTIES:
:CUSTOM_ID: 複数の予測系列への分析事例
:END:
**** データの読み込み
:PROPERTIES:
:CUSTOM_ID: データの読み込み
:END:
#+begin_src jupyter-python :exports both
# データの読み込み
large_data_1 = pd.read_csv(Path("../book-data")/'7-1-3-large-train-1.csv',
                      index_col='date', 
                      parse_dates=True, 
                      dtype='float')

# 日データであることの指定
large_data_1.index.freq = 'D'

# 最初と最後の日付
print(large_data_1.index[[0, -1]])
#+end_src

#+RESULTS:
: DatetimeIndex(['2000-05-01', '2000-08-08'], dtype='datetime64[ns]', name='date', freq=None)

#+begin_src jupyter-python :exports both
large_data_1.shape
#+end_src

#+RESULTS:
| 100 | 50 |

#+begin_src jupyter-python :exports both
large_data_1.columns
#+end_src

#+RESULTS:
: Index(['y_0', 'y_1', 'y_2', 'y_3', 'y_4', 'y_5', 'y_6', 'y_7', 'y_8', 'y_9',
:        'y_10', 'y_11', 'y_12', 'y_13', 'y_14', 'y_15', 'y_16', 'y_17', 'y_18',
:        'y_19', 'y_20', 'y_21', 'y_22', 'y_23', 'y_24', 'y_25', 'y_26', 'y_27',
:        'y_28', 'y_29', 'y_30', 'y_31', 'y_32', 'y_33', 'y_34', 'y_35', 'y_36',
:        'y_37', 'y_38', 'y_39', 'y_40', 'y_41', 'y_42', 'y_43', 'y_44', 'y_45',
:        'y_46', 'y_47', 'y_48', 'y_49'],
:       dtype='object')

**** パラメータの推定と予測
:PROPERTIES:
:CUSTOM_ID: パラメータの推定と予測
:END:
#+begin_src jupyter-python :exports both :results none
%%time
for i in range(0, large_data_1.shape[1]):    
    # 季節変動ありのローカル線形トレンドモデル
    mod_loop = tsa.UnobservedComponents(
        large_data_1.iloc[:, i],        # 対象データ
        level='local linear trend',     # ローカル線形トレンド
        seasonal=7                      # 周期
    ).fit()

    # パラメータの保存
    if (i == 0):
        params = mod_loop.params
        
         # パラメータを見分けるための名前の設定
        params.name = large_data_1.columns[i]
    else:
        param_temp = mod_loop.params
        
         # パラメータを見分けるための名前の設定
        param_temp.name = large_data_1.columns[i]
        
        # 推定されたパラメータを1つのDataFrameにまとめる
        params = pd.concat([params,param_temp], axis=1)

    # 予測
    if (i == 0):
        forecasts_1 = mod_loop.forecast(14)
        
         # パラメータを見分けるための名前の設定
        forecasts_1.name = large_data_1.columns[i]
    else:
        fore_temp = mod_loop.forecast(14)
        
         # パラメータを見分けるための名前の設定
        fore_temp.name = large_data_1.columns[i]
        
        # 推定されたパラメータを1つのDataFrameにまとめる
        forecasts_1 = pd.concat([forecasts_1, fore_temp], axis=1)
#+end_src

#+RESULTS:


#+begin_src jupyter-python :exports both
# 参考：予測結果
print(forecasts_1)
#+end_src

#+RESULTS:
#+begin_example
                   y_0         y_1         y_2         y_3         y_4  \
2000-08-09  234.528419  271.580325  338.468888  126.466163  226.069669
2000-08-10  128.682851  258.806627  264.112037  110.129854  299.053149
2000-08-11  203.142581  271.366065  182.076985  136.000994  271.650916
2000-08-12  191.631116  222.830157  299.465197  189.151608  184.730519
2000-08-13  192.456173  274.412995  313.583121  134.301545  182.000621
2000-08-14  283.011434  280.093735  282.120078  148.127878  225.169127
2000-08-15  208.481095  367.949682  264.042215  100.790389  262.306401
2000-08-16  178.081231  290.421944  271.670424  107.256553  230.879680
2000-08-17   72.235663  277.648246  197.313573   90.920244  303.863160
2000-08-18  146.695392  290.207684  115.278521  116.791383  276.460926
2000-08-19  135.183927  241.671776  232.666733  169.941997  189.540530
2000-08-20  136.008984  293.254614  246.784657  115.091935  186.810632
2000-08-21  226.564245  298.935354  215.321614  128.918268  229.979138
2000-08-22  152.033907  386.791301  197.243751   81.580779  267.116412

                   y_5         y_6         y_7         y_8         y_9  ...  \
2000-08-09  127.080127  229.368513  583.443890  330.158717  217.297531  ...
2000-08-10  124.478983  199.685782  657.182638  345.374915  269.500570  ...
2000-08-11   99.473762  234.576132  631.205824  315.251304  203.915858  ...
2000-08-12   98.548812  233.939675  649.720237  271.570029  195.675767  ...
2000-08-13  118.905451  191.781038  715.573080  320.149903  279.613368  ...
2000-08-14  186.072545  227.382734  679.584529  330.960691  160.026750  ...
2000-08-15  106.047741  245.421015  638.878509  330.575872  140.580428  ...
2000-08-16  117.202539  247.789528  643.322399  352.734589  202.262531  ...
2000-08-17  114.601394  218.106797  717.061147  367.950787  254.465569  ...
2000-08-18   89.596174  252.997147  691.084333  337.827176  188.880857  ...
2000-08-19   88.671224  252.360690  709.598746  294.145901  180.640766  ...
2000-08-20  109.027862  210.202054  775.451589  342.725775  264.578367  ...
2000-08-21  176.194957  245.803749  739.463038  353.536564  144.991750  ...
2000-08-22   96.170153  263.842030  698.757018  353.151744  125.545427  ...

                  y_40        y_41        y_42        y_43        y_44  \
2000-08-09  487.640819  250.702500  226.174763  623.151442  260.272160
2000-08-10  605.008267  210.864607  298.815293  643.209269  366.308713
2000-08-11  572.635668  253.003938  264.862683  577.591308  306.357112
2000-08-12  530.857761  281.726966  226.225895  686.265398  267.285102
2000-08-13  528.743809  284.278165  241.113885  522.417969  159.194336
2000-08-14  535.538301  183.577357  296.797074  578.063855  278.545593
2000-08-15  642.884693  221.872764  280.192116  636.345236  253.779194
2000-08-16  521.476393  247.731768  258.224642  659.177389  216.432317
2000-08-17  638.843841  207.893875  330.865172  679.235216  322.468870
2000-08-18  606.471242  250.033206  296.912562  613.617255  262.517269
2000-08-19  564.693335  278.756235  258.275774  722.291345  223.445259
2000-08-20  562.579383  281.307433  273.163765  558.443915  115.354493
2000-08-21  569.373875  180.606625  328.846953  614.089802  234.705750
2000-08-22  676.720267  218.902032  312.241995  672.371182  209.939351

                  y_45        y_46        y_47        y_48        y_49
2000-08-09  463.529188  568.856395  274.810806  239.526249  469.031729
2000-08-10  333.822632  530.418160  183.049939  153.814567  500.936957
2000-08-11  457.576353  594.417126  261.017226  201.605615  609.980156
2000-08-12  445.141710  557.256798  250.196926  147.898528  590.059137
2000-08-13  359.559985  680.265269  299.732540  142.111330  522.996247
2000-08-14  481.476757  601.367987  206.104248  136.976913  594.879247
2000-08-15  498.289047  620.010108  234.222471  163.910384  570.983063
2000-08-16  495.916374  622.943397  267.942765  233.983078  489.677897
2000-08-17  366.209819  584.505163  176.181899  148.271396  521.583125
2000-08-18  489.963540  648.504128  254.149185  196.062445  630.626325
2000-08-19  477.528897  611.343801  243.328885  142.355358  610.705306
2000-08-20  391.947172  734.352272  292.864499  136.568160  543.642415
2000-08-21  513.863943  655.454989  199.236208  131.433743  615.525415
2000-08-22  530.676234  674.097110  227.354431  158.367214  591.629231

[14 rows x 50 columns]
#+end_example

**** 新しいデータを用いたフィルタリングと予測
:PROPERTIES:
:CUSTOM_ID: 新しいデータを用いたフィルタリングと予測-1
:END:
#+begin_src jupyter-python :exports both
# データの読み込み
large_data_2 = pd.read_csv(Path("../book-data")/'7-1-4-large-train-2.csv',
                      index_col='date', 
                      parse_dates=True, 
                      dtype='float')

# 日データであることの指定
large_data_2.index.freq = 'D'

# 最初と最後の日付
print(large_data_2.index[[0, -1]])
#+end_src

#+RESULTS:
: DatetimeIndex(['2000-05-01', '2000-08-15'], dtype='datetime64[ns]', name='date', freq=None)

#+begin_src jupyter-python :exports both
%%time
for i in range(0, large_data_2.shape[1]):    
    # 季節変動ありのローカル線形トレンドモデル
    mod_loop = tsa.UnobservedComponents(
        large_data_2.iloc[:, i],        # 対象データ
        level='local linear trend',     # ローカル線形トレンド
        seasonal=7                      # 周期
    )
    
    # パラメータを指定してフィルタリング
    mod_loop = mod_loop.filter(params = params[large_data_2.columns[i]])

    # 予測
    if (i == 0):
        forecasts_2 = mod_loop.forecast(14)
        
         # パラメータを見分けるための名前の設定
        forecasts_2.name = large_data_2.columns[i]
    else:
        fore_temp = mod_loop.forecast(14)
        
         # パラメータを見分けるための名前の設定
        fore_temp.name = large_data_2.columns[i]
        
        # 推定されたパラメータを1つのDataFrameにまとめる
        forecasts_2 = pd.concat([forecasts_2, fore_temp], axis=1)
#+end_src

#+RESULTS:
: CPU times: user 182 ms, sys: 8.96 ms, total: 191 ms
: Wall time: 191 ms


#+begin_src jupyter-python :exports both
# 参考：予測結果
print(forecasts_2)
#+end_src

#+RESULTS:
#+begin_example
                   y_0         y_1         y_2         y_3         y_4  \
2000-08-16  210.933353  313.738607  256.725444  113.011053  244.658935
2000-08-17  106.124903  302.771193  179.078386   95.950641  316.866879
2000-08-18  181.268480  317.760939   97.366901  122.749208  289.514204
2000-08-19  172.058436  271.174595  214.328593  175.568997  203.233649
2000-08-20  176.279151  325.011981  223.582271  121.525310  201.198550
2000-08-21  266.817597  332.391848  192.504180  135.087430  243.321560
2000-08-22  193.797368  422.502646  173.187644   87.360755  280.978091
2000-08-23  166.756172  347.369475  179.288532   94.371808  251.763119
2000-08-24   61.947723  336.402061  101.641474   77.311397  323.971063
2000-08-25  137.091300  351.391806   19.929989  104.109963  296.618388
2000-08-26  127.881255  304.805462  136.891681  156.929752  210.337833
2000-08-27  132.101970  358.642848  146.145359  102.886065  208.302734
2000-08-28  222.640417  366.022716  115.067268  116.448185  250.425744
2000-08-29  149.620188  456.133513   95.750732   68.721510  288.082275

                   y_5         y_6         y_7         y_8         y_9  ...  \
2000-08-16  102.100232  256.160855  619.325565  340.776917  226.027106  ...
2000-08-17   99.641814  225.785748  691.312890  354.739287  281.068348  ...
2000-08-18   74.250517  261.613072  663.935715  323.156919  216.237329  ...
2000-08-19   72.735293  260.761713  679.651464  279.834076  209.012590  ...
2000-08-20   92.427416  218.421008  745.280648  327.525509  293.642727  ...
2000-08-21  159.747333  254.522114  705.911292  336.160778  175.587687  ...
2000-08-22   79.865985  272.500531  664.204115  337.006139  156.247995  ...
2000-08-23   91.197273  276.661387  665.529680  358.783056  219.605468  ...
2000-08-24   88.738855  246.286279  737.517005  372.745427  274.646710  ...
2000-08-25   63.347558  282.113604  710.139830  341.163058  209.815691  ...
2000-08-26   61.832334  281.262244  725.855578  297.840215  202.590952  ...
2000-08-27   81.524456  238.921539  791.484763  345.531648  287.221089  ...
2000-08-28  148.844374  275.022646  752.115407  354.166918  169.166049  ...
2000-08-29   68.963026  293.001063  710.408230  355.012279  149.826357  ...

                  y_40        y_41        y_42        y_43        y_44  \
2000-08-16  517.962755  259.472628  247.169111  621.785001  215.931789
2000-08-17  633.959101  219.488726  318.153373  638.416033  321.750069
2000-08-18  601.289036  263.332378  282.587077  571.667722  263.265144
2000-08-19  559.307195  290.711300  245.995011  678.709386  223.096321
2000-08-20  555.660556  295.704133  258.025124  514.289879  114.562210
2000-08-21  563.000149  195.034941  311.190863  564.541198  234.044001
2000-08-22  668.990096  233.964046  296.388383  623.429660  208.214654
2000-08-23  548.415681  259.650180  273.378233  643.168585  170.911572
2000-08-24  664.412027  219.666279  344.362495  659.799617  276.729852
2000-08-25  631.741962  263.509930  308.796199  593.051307  218.244927
2000-08-26  589.760121  290.888853  272.204133  700.092971  178.076104
2000-08-27  586.113482  295.881685  284.234246  535.673463   69.541993
2000-08-28  593.453076  195.212494  337.399985  585.924783  189.023784
2000-08-29  699.443022  234.141599  322.597505  644.813245  163.194437

                  y_45        y_46        y_47        y_48        y_49
2000-08-16  489.518875  623.532307  221.551314  224.109938  498.161813
2000-08-17  357.672616  585.021715  130.196824  140.037867  530.474013
2000-08-18  482.227968  647.077616  206.534891  185.789557  641.085327
2000-08-19  468.634458  610.010568  194.999605  131.632753  622.621413
2000-08-20  384.647490  732.922585  243.023209  125.596511  554.697922
2000-08-21  505.136280  652.890594  148.966719  122.128476  627.414933
2000-08-22  521.348774  670.447790  176.517616  149.219985  605.779401
2000-08-23  519.124335  674.747702  207.873056  217.948777  523.352826
2000-08-24  387.278077  636.237110  116.518566  133.876707  555.665027
2000-08-25  511.833428  698.293011  192.856633  179.628397  666.276340
2000-08-26  498.239918  661.225963  181.321347  125.471593  647.812427
2000-08-27  414.252950  784.137980  229.344951  119.435350  579.888936
2000-08-28  534.741740  704.105989  135.288460  115.967316  652.605946
2000-08-29  550.954234  721.663185  162.839357  143.058825  630.970414

[14 rows x 50 columns]
#+end_example

**** 予測結果の確認
:PROPERTIES:
:CUSTOM_ID: 予測結果の確認
:END:
#+begin_src jupyter-python :exports both
# 予測結果を可視化するための関数
def plot_result(target_data_name):
    # グラフサイズの指定
    fig, ax = plt.subplots(figsize=(8, 4))
    
    # 折れ線グラフを描く
    ax.plot(large_data_2.loc['2000-07-15':][target_data_name], 
            label='実際の売り上げ')
    ax.plot(forecasts_1[target_data_name], 
            label='古いデータを用いた予測値')
    ax.plot(forecasts_2[target_data_name], 
            label='新しいデータを用いた予測値')

    # 凡例
    ax.legend()
    
    # 軸の指定(週ごと)
    ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))
    
    # 軸ラベルのフォーマット
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m月%d日'))
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports both :file ./images/7-1-2.png :results output file
# 予測結果の可視化
plot_result('y_0')
#+end_src

#+RESULTS:
[[file:./images/7-1-2.png]]
